#= require_self
#= require_tree "./material"

class Jax.Material
  constructor: (options, @name = "generic") ->
    @shader = new Jax.Shader.Program @name
    @layers = []
    @assigns = {}
    options = Jax.Util.normalizeOptions options, {}
    for key, value of options
      switch key
        when 'layers'  then @addLayer layer for layer in value
        else @[key] = value
    
  @define 'vertex', get: -> @shader.vertex
  @define 'fragment', get: -> @shader.fragment
  
  addLayer: (options) ->
    if typeof options is 'string' then options = { type: options }
    if options instanceof Jax.Material.Layer
      @layers.push options
      return options
    
    Klass = Jax.Material[options.type]
    throw new Error "#{@name}: Material layer type #{options.type} could not be found" unless Klass
    options = Jax.Util.normalizeOptions options, shader: Klass.shader || Jax.Util.underscore options.type
    layer = new Klass options, this
    if layer instanceof Jax.Material
      throw new Error """
        #{@name}: Custom material layers now inherit from Jax.Material.Layer instead of Jax.Material.
        Please also note that the constructor takes two arguments: the classic `options` hash, and a
        reference to the layer's parent instance of `Jax.Material`, which should be passed to `super`.
        Please see the documentation for more information.
      """
    @layers.push layer
    layer
  
  renderPasses: (context, mesh, model) ->
    submesh = mesh
    numPassesRendered = 0
    while submesh
      max = 0
      for layer in @layers
        passes = layer.numPasses context, submesh, model
        max = passes if passes > max
      gl = context.gl
      for pass in [0...max]
        continue unless @preparePass context, submesh, model, pass, numPassesRendered
        numPassesRendered++
        @drawBuffers context, submesh
      if numPassesRendered > 1
        gl.blendFunc GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA
        gl.depthFunc GL_LESS
      submesh = submesh.submesh
    return numPassesRendered
    
  preparePass: (context, mesh, model, pass, numPassesRendered = 0) ->
    for layer in @layers
      if result = (layer.setup context, mesh, model, pass) is false
        return false
    if numPassesRendered is 1
      gl = context.gl
      gl.blendFunc GL_ONE, GL_ONE
      gl.depthFunc GL_LEQUAL
    @shader.set context, @assigns
    return true
    
  drawBuffers: (context, mesh) ->
    unless <%= Rails.env.production? %> or @_alreadyWarned
      # in development mode, check that all variables are assigned, and warn if not.
      # Only do this once (per material).
      @_alreadyWarned = true
      for name, variable of @shader.variables(context)
        if variable.value is undefined
          console.log "Warning: material #{@name} did not set a value for shader variable #{variable.name}"
      
    if (buffer = mesh.getIndexBuffer()) && buffer.length
      buffer.bind context
      context.gl.drawElements mesh.draw_mode, buffer.length, buffer.dataType, 0
    else if length = mesh.data.vertexBuffer?.length
      context.gl.drawArrays mesh.draw_mode, 0, length
    
  render: (context, mesh, model) ->
    # FIXME only should have to do this at the top level
    submesh = mesh
    while submesh
      submesh.data.context = context
      submesh = submesh.submesh
    @shader.bind context
    @renderPasses context, mesh, model
  
  @instances: {}
  @resources: {}
  
  @find: (name) ->
    return Jax.Material.instances[name] if Jax.Material.instances[name]
    throw new Error "Material '#{name}' could not be found!" unless data = Jax.Material.resources[name]
    # FIXME Messy...
    switch data.type?.toString().toUpperCase()
      when undefined
        # Legacy. Equivalent to Custom, but with a basic shader.
        Klass = Jax.Material
        data.layers or= []
        data.layers.unshift type: "VertexColor"
        data.layers.unshift type: "Position"
      when 'CUSTOM' then Klass = Jax.Material.Custom
      when 'LEGACY' then Klass = Jax.Material.Legacy
      when 'SURFACE', 'VOLUME', 'HALO', 'WIRE'
        throw new Error "#{name}: Material type #{data.type} is not yet implemented."
      else
        throw new Error "#{name}: Material property `type` is invalid. Please note that its meaning changed in Jax v2.1 and see documentation for details."
    Jax.Material.instances[name] = new Klass data, name
    
  @addResources: (resources) ->
    for name, data of resources
      # throw new Error "Duplicate material name: #{name}" if Jax.Material.resources[name]
      Jax.Material.resources[name] = data

  @clearResources: ->
    Jax.Material.resources = {}
    Jax.Material.instances = {}
  