<%= require("shaders/lib/light_ambient") %>
<%= require("shaders/lib/lambert_diffuse") %>
<%= require("shaders/lib/phong_specular") %>
<%= require("shaders/lib/light_attenuation") %>

void main(void) {
  if (WorldAmbientEnabled) {
    gl_FragColor = vVertexColor;
    gl_FragColor.rgb *= WorldAmbientColor.a   *
                        WorldAmbientColor.rgb *
                        MaterialAmbientIntensity;
  } else {
    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
  }

  gl_FragColor.a *= MaterialAmbientColor.a +
                    MaterialDiffuseColor.a +
                    MaterialSpecularColor.a;

  vec3 ambientLightColor, diffuseLightColor, specularLightColor;
  float spotAttenuation, lightDistanceFromSurface;

  vec3 eyeSpaceSurfaceNormal = vEyeSpaceSurfaceNormal;
  if (!gl_FrontFacing) eyeSpaceSurfaceNormal = -eyeSpaceSurfaceNormal;
  eyeSpaceSurfaceNormal = normalize(eyeSpaceSurfaceNormal);

  vec3 attenuatedLightColor;
  <% for (var i = 0; i < Jax.Material.Surface.MAX_LIGHTS_PER_PASS; i++) { %>
    if (LightEnabled[<%= i %>]) {
      LightAmbient(MaterialAmbientIntensity,
                   MaterialAmbientColor,
                   LightAmbientColor[<%= i %>],
                   ambientLightColor);

      LambertDiffuse(eyeSpaceSurfaceNormal,
                     vEyeSpaceSurfacePosition,
                     EyeSpaceLightDirection[<%= i %>],
                     EyeSpaceLightPosition[<%= i %>],
                     MaterialDiffuseIntensity,
                     MaterialDiffuseColor,
                     LightType[<%= i %>],
                     LightSpotInnerCos[<%= i %>],
                     LightSpotOuterCos[<%= i %>],
                     LightDiffuseColor[<%= i %>],
                     diffuseLightColor,
                     spotAttenuation,
                     lightDistanceFromSurface);

      PhongSpecular(eyeSpaceSurfaceNormal,
                     vEyeSpaceSurfacePosition,
                     EyeSpaceLightDirection[<%= i %>],
                     EyeSpaceLightPosition[<%= i %>],
                     MaterialShininess,
                     MaterialSpecularIntensity,
                     MaterialSpecularColor,
                     LightType[<%= i %>],
                     LightSpotInnerCos[<%= i %>],
                     LightSpotOuterCos[<%= i %>],
                     LightDiffuseColor[<%= i %>],
                     specularLightColor,
                     spotAttenuation);

      attenuatedLightColor = diffuseLightColor + specularLightColor;
      LightAttenuation(lightDistanceFromSurface,
                       spotAttenuation,
                       LightConstantAttenuation[<%= i %>],
                       LightLinearAttenuation[<%= i %>],
                       LightQuadraticAttenuation[<%= i %>],
                       attenuatedLightColor);
      
      gl_FragColor.rgb += ambientLightColor + attenuatedLightColor;
    }
  <% } %>
}
