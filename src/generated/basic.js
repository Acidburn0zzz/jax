Jax.shaders['basic'] = new Jax.Shader({  common:"shared uniform mat4 ivMatrix, mvMatrix, pMatrix, vMatrix;\nshared uniform mat3 vnMatrix, nMatrix;\n\nshared uniform vec4 materialDiffuse, materialAmbient, materialSpecular;\nshared uniform float materialShininess;\n\nshared uniform int PASS_TYPE;\n\nshared varying vec2 vTexCoords;\nshared varying vec3 vNormal, vLightDir, vTbnDirToLight;\nshared varying vec4 vBaseColor;\n\n\nconst struct LightSource {\n  vec3 position; // in world space\n  vec3 direction; // in world space\n  vec4 ambient, diffuse, specular;\n  float constant_attenuation, linear_attenuation, quadratic_attenuation;\n  float spotExponent, spotCosCutoff;\n};\n\nvoid DirectionalLight(const in LightSource light,\n                      in vec3 normal,\n                      inout vec4 ambient,\n                      inout vec4 diffuse,\n                      inout vec4 specular)\n{\n  vec3 nLDir = normalize(vnMatrix * -normalize(light.direction));\n  vec3 halfVector = normalize(nLDir + vec3(0,0,1));\n  float pf;\n  \n  float NdotD  = max(0.0, dot(normal, nLDir));\n  float NdotHV = max(0.0, dot(normal, halfVector));\n  \n  if (NdotD == 0.0) pf = 0.0;\n  else pf = pow(NdotHV, materialShininess);\n  \n  ambient += light.ambient;\n  diffuse += light.diffuse * NdotD;\n  specular += light.specular * pf;\n}\n\n\nLightSource LIGHT = LightSource(\n  vec3(0), // position\n  vec3(-1.0, -1.0, -1.0), // direction\n  vec4(0.4, 0.4, 0.4, 1.0), // ambient\n  vec4(0.6, 0.6, 0.6, 1.0), // diffuse\n  vec4(1.0, 1.0, 1.0, 1.0), // specular\n  1.0,     // constant atten\n  0.0,     // linear atten\n  0.0,     // quadratic atten\n  0.0,     // spotExponent\n  0.0      // spotCosCutoff\n);\n",
  fragment:"void main(void) {\n  vec4 ambient = vec4(0);\n  vec4 diffuse = vec4(0), specular = vec4(0);\n  \n  vec3 nTbnDirToLight = normalize(vTbnDirToLight);\n\n  vec3 nNormal = normalize(vNormal);\n\n  DirectionalLight(LIGHT, nNormal, ambient, diffuse, specular);\n  \n  vec4 final_color = ambient  * materialAmbient  * vBaseColor +\n                     diffuse  * materialDiffuse  * vBaseColor +\n                     specular * materialSpecular * vBaseColor;\n                     \n  export(vec4, FragColor, final_color);\n  \n  gl_FragColor = final_color;\n}\n",
  vertex:"shared attribute vec2 VERTEX_TEXCOORDS;\nshared attribute vec3 VERTEX_NORMAL;\nshared attribute vec4 VERTEX_POSITION, VERTEX_COLOR, VERTEX_TANGENT;\n\nvoid main(void) {\n  vBaseColor = VERTEX_COLOR;\n  vNormal = nMatrix * VERTEX_NORMAL;\n  vTexCoords = VERTEX_TEXCOORDS;\n\n  vec3 tangent = nMatrix * VERTEX_TANGENT.xyz;\n  vec3 bitangent = cross(vNormal, tangent) * VERTEX_TANGENT.w;\n  vec3 dirToEye = -(mvMatrix * VERTEX_POSITION).xyz;\n  vec3 tbnDirToEye = vec3(dot(dirToEye, tangent),\n                          dot(dirToEye, bitangent),\n                          dot(dirToEye, vNormal));\n                          \n  vLightDir = normalize(vnMatrix * -normalize(LIGHT.direction));\n  vTbnDirToLight.x = dot(vLightDir, tangent);\n  vTbnDirToLight.y = dot(vLightDir, bitangent);\n  vTbnDirToLight.z = dot(vLightDir, vNormal);\n\n  gl_Position = pMatrix * mvMatrix * VERTEX_POSITION;\n}\n",
exports: {"FragColor":"vec4"},
name: "basic"});
