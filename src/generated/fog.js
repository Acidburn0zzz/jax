Jax.shaders['fog'] = new Jax.Shader({  common:"uniform vec4 FogColor;\n\nuniform int Algorithm;\n\nuniform float Scale;\nuniform float End;\nuniform float Density;\n\nvarying vec3 vFogFactor;\n",
  fragment:"void main(inout vec4 ambient, inout vec4 diffuse, inout vec4 specular) {\n//  float fog;\n//  float distance = length(vFragCoord);\n\n  const float LOG2 = 1.442695;\n\n  float z = gl_FragCoord.z / gl_FragCoord.w;\n  float fogFactor = exp( -Density * Density * z * z );\n  fogFactor = clamp(fogFactor, 0.0, 1.0);\n  \n//  gl_FragColor = mix(gl_Fog.color, finalColor, fogFactor );\n\t\t\t\t  \n//  ambient  = mix(FogColor,  ambient,  fog);\n  diffuse  = mix(FogColor,  diffuse,  fogFactor);\n}\n",
  vertex:"shared attribute vec4 VERTEX_POSITION;\n\nshared uniform mat4 mvMatrix, pMatrix;\n\nconst float LOG2 = 1.442695;\n\nvoid main(void) {\n  vec4 pos = mvMatrix * VERTEX_POSITION;\n  gl_Position = pMatrix * pos;\n//\n//\n//  float distance = length(pos);\n//  \n//  if (Algorithm == <%=Jax.LINEAR%>) {\n//    vFogFactor = (End - distance) * Scale;\n//  } else if (Algorithm == <%=Jax.EXPONENTIAL%>) {\n//    vFogFactor = exp(-Density * distance);\n//  } else if (Algorithm == <%=Jax.EXP2%>) {\n//    vFogFactor = exp2(-Density * Density * distance * distance * LOG2);\n//  } else vFogFactor = 0.0;\n//  \n//  vFogFactor = clamp(fog, 0.0, 1.0);\n}\n",
exports: {},
name: "fog"});
