* 1.0.0 *

* First major-version release, baby!

* `rake build` with Jax rakefile now minifies jax.js before packaging so that
  apps generated with `jax new appname` use minified jax.
  
* Jax.Mesh.Plane now includes texture coordinates. The range is [0..1] regardless
  of size of plane or number of segments, so use texture scaling like you would for
  any other mesh if a wider range is required.
  
* Lighting shader now takes options to override the defaults. This makes it easier
  to extend with other shaders -- useful for shaders that alter or replace the
  lighting model, or for shaders that just rely on the same uniforms.



* 0.0.0.10 *

* Excluded worthless files from gemsec and reduced size of gem from 9mb to 100k!



* 0.0.0.9 *

* Minor bugfixes for Jax.Util.colorize() and Jax.Util.Vectorize(). Specifically,
  fixes involved correctly processing 3D colors and 2D vectors.

* Switch shader test generator to use SPEC_CONTEXT, which is now defined in the
  spec_layout and helper files for new applicats. This isn't *immediately*
  app-breaking but you should regenerate these files anyways or the next time you
  generate a shader will cause a bad day.

* List enum name next to error number for clarity when render errors occur.

* Abstract test suite setup into a separate helper file

* Add a global SPEC_CONTEXT so users don't have to manually create a new context for
  each spec
  
* Specs run on a completely separate context so that they don't cause issues with
  the visual tests



* 0.0.0.8 *

* Added +Jax.Shaders.max_vertex_textures+ which tracks the value of
  GL_MAX_VERTEX_TEXTURE_UNITS so you can design shaders that Just Work.

* Exposed +shader_type+ to the EJS template so you can determine whether a shader's
  source is for a vertex or fragment shader. (It's a string equal to either 'vertex'
  or 'fragment'.) Useful for 'common' code, even more useful for reusable function
  libraries. ;)
  
* Modified Jax built-in noise functions to utilize the above in order to quietly
  fall back to the no-texture-lookup noise implementation by Ian McEwan:
  https://github.com/ashima/webgl-noise . This implementation is considerably slower
  than the VTL one (my FPS on Mac drops from ~100 to ~60 for the 'blob' demo), so
  it is better used as a secondary noise than as a primary.
  
* Renamed the VTL 'noise' function to 'cnoise' to avoid ambiguity in programs. Use
  'cnoise' or 'snoise'.



* 0.0.0.7 *

* Fixed a bug which could cause applications to fail in production (after running
  `rake jax:package`). It was due to the packager adding helper files in the wrong
  order.



* 0.0.0.6 *

* Introduced Jax.uptime, a running total of number of seconds since the Jax subsystem
  was _loaded_ (not necessarily instantiated). This is now used in place of various
  timers in Jax, e.g. for calculating the +timechange+ argument to #update methods.

* Added 'picking' support via Jax.World#pick(x,y); Jax.World#pickIndex(x,y);
  Jax.World#pickRegion(x1,y1, x2,y2); Jax.World#pickRegionalIndices(x1,y1, x2,y2).
  This is the last milestone prior to v1.0 release.

* Lots of new JavaScript API documentation

* Renamed Jax.Camera#getModelViewMatrix() to Jax.Camera#getTransformationMatrix().
  The latter is more accurate. THIS WILL BREAK EXISTING APPS but since Jax is still
  considered pre-release I'm not taking the extra step to deprecate it.

* Added Jax version number and framerate counter to spec layouts

* Added perlin noise example to /spec/example_app

* Added aliases for Math.radToDeg / Math.rad2deg and Math.degToRad / Math.deg2rad



* 0.0.0.5 *

* Jax now checks JS version against gem version and reports on mismatches

* Perlin noise functions added -- just do this in your shader:
  //= require "functions/noise"

* Split 'paraboloid-depthmap' shader into 2 separate shaders: 'paraboloid' and 'depthmap'
  This makes it possible to reuse paraboloids for environment mapping.

* Shader dependencies are now loaded via Jax.shader_load_paths, which can be multiple
  different directories (e.g. Jax builtin + app/shaders) This makes functions used by
  Jax available for reuse in custom shaders.

* Added CHANGELOG. :)
